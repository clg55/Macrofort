# GENERALIZED NEWTON ALGORITHM
#  F[I] IS THE TABLE OF THE FUNCTIONS WITH THE VARIABLES X[J]
#  X IS THE GENERIC NAME OF THE VARIABLES X[J]
#  N IS THE NUMBER OF FUNCTIONS AND VARIABLES 

gen_newton := proc(ff,xx,n)
  global input,output;
  local f,fo,ii,jac,jj,linit,lwhile,m,pg,x,zj;
# main program
# Jacobian matrix
  jac := array(1..n,1..n);
  for ii from 1 to n do
    for jj from 1 to n do
      jac[ii,jj] := diff(ff[ii],xx[jj])
  od od;
# pg: MAPLE list describing the main program
  pg:=[[declaref,real,[f[n],zj[n,n],x[n]]],
       [writem,output,[`'eps = '`],[]],
       [readm,input,[`e14.7`],[eps]]];
# while instruction
  linit:=[[dom,i,1,n,
          [[writem,output,[`'x(',i3,') = '`],[i]],
           [readm,input,[`e14.7`],[x[i]]]]]];
  for ii from 1 to n do pushe([equalf,f[ii],ff[ii]],'linit') od;
  lwhile:=[[matrixm,zj,jac],
              [callf,resol,[zj,f,n]],
              [dom,i,1,n,[equalf,x[i],-f[i]+x[i]]]];
  for ii from 1 to n do pushe([equalf,f[ii],ff[ii]],'lwhile') od;
  pg:=[op(pg),
             [[whilem,znorm(f,n) >= eps,linit,lwhile,1000],
              [writem,output,[`(2x,e14.7)`],[x]]]];
 pg:=[programm,newton,pg];

# fo: MAPLE list describing the subroutine computing the quadratic norm of f
  fo:=[[declaref,real,[f[m]]],
      [equalf,znorm,0.],
      [dom,i,1,n,[equalf,znorm,znorm+f[i]**2]],
      [equalf,znorm,sqrt(znorm)]];
  fo:=[functionm,real,znorm,[f,m],fo];

# FORTRAN code generation
  writeto(`newton.f`);
  init_genfor();
  interface(quiet=true);
  genfor(pg);
  genfor(fo);
  interface(quiet=false);
  writeto(terminal);
end:
